apiVersion: v1
kind: Service
metadata:
  name: detik-analytic-collector-deployment
  namespace: detik-collector
  labels:
    app: detik-analytic-collector
    role: load-balancer
    tier: backend
   
spec:
  type: LoadBalancer
  loadBalancerIP: 35.240.204.33
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: detik-analytic-collector
    role: microservices
    tier: backend
  
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: detik-analytic-collector-deployment
  namespace: detik-collector
  labels:
    app: detik-analytic-collector
    role: microservices
    tier: backend
spec:
  replicas: 1

  # 1. How do want to update the pods?
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2        # how many pods we can add at a time
      maxUnavailable: 2  # maxUnavailable define how many pods can be unavailable
                         # during the rolling update

  # 2. Which pods are managed by this deployment?
  selector:
    # This must match the labels we set on the pod!
    matchLabels:
      app: detik-analytic-collector
      role: microservices
      tier: backend

  
  # This template field is a regular pod configuration 
  # nested inside the deployment spec
  template:
    metadata:
      # Set labels on the pod.
      # This is used in the deployment selector.
      labels:
        app: detik-analytic-collector
        role: microservices
        tier: backend
    spec:
      containers:
        - name: analytic-collector
          image: gcr.io/detikcom-179007/bigdata/analytic-collector:1.1.0
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: ANALYTIC_COLLECTOR_SOCKET
            value: 'tcp://0.0.0.0:8080'
          - name: ANALYTIC_COLLECTOR_GCP_TOPIC_GET_ID
            value: 'analytic-raw-desktop'
          - name: ANALYTIC_COLLECTOR_GCP_TOPIC_POST_ID
            value: 'analytic-raw-apps'
          - name: ANALYTIC_COLLECTOR_PARSER_MAX_WORKER
            value: '200'
          resources:
            limits:
              cpu: '1'
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 512Mi
      restartPolicy: Always
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  annotations:
  name: detik-analytic-collector-deployment
  namespace: detik-collector
spec:
  minReplicas: 2
  maxReplicas: 6
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: detik-analytic-collector-deployment
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 70