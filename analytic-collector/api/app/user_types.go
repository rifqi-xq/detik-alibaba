// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "analytic-collector": Application User Types
//
// Command:
// $ goagen
// --design=analytic-collector/api/design
// --out=$(GOPATH)/src/analytic-collector/api
// --version=v1.4.1

package app

import (
	"github.com/goadesign/goa"
)

// articleCustomParamType user type.
type articleCustomParamType struct {
	// Custom param key
	Key *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	// Custom param value
	Value *string `form:"value,omitempty" json:"value,omitempty" yaml:"value,omitempty" xml:"value,omitempty"`
}

// Publicize creates ArticleCustomParamType from articleCustomParamType
func (ut *articleCustomParamType) Publicize() *ArticleCustomParamType {
	var pub ArticleCustomParamType
	if ut.Key != nil {
		pub.Key = ut.Key
	}
	if ut.Value != nil {
		pub.Value = ut.Value
	}
	return &pub
}

// ArticleCustomParamType user type.
type ArticleCustomParamType struct {
	// Custom param key
	Key *string `form:"key,omitempty" json:"key,omitempty" yaml:"key,omitempty" xml:"key,omitempty"`
	// Custom param value
	Value *string `form:"value,omitempty" json:"value,omitempty" yaml:"value,omitempty" xml:"value,omitempty"`
}

// articleMedia user type.
type articleMedia struct {
	// Account type name
	AccountType *string `form:"accountType,omitempty" json:"accountType,omitempty" yaml:"accountType,omitempty" xml:"accountType,omitempty"`
	// Article ID
	ArticleID *string `form:"articleId,omitempty" json:"articleId,omitempty" yaml:"articleId,omitempty" xml:"articleId,omitempty"`
	// Article's channel ID
	ChannelID *string `form:"channelId,omitempty" json:"channelId,omitempty" yaml:"channelId,omitempty" xml:"channelId,omitempty"`
	// Article's created date (in unix seconds format)
	CreatedDate  *float64                  `form:"createdDate,omitempty" json:"createdDate,omitempty" yaml:"createdDate,omitempty" xml:"createdDate,omitempty"`
	CustomParams []*articleCustomParamType `form:"customParams,omitempty" json:"customParams,omitempty" yaml:"customParams,omitempty" xml:"customParams,omitempty"`
	// Article's published date (in unix seconds format)
	PublishedDate *float64 `form:"publishedDate,omitempty" json:"publishedDate,omitempty" yaml:"publishedDate,omitempty" xml:"publishedDate,omitempty"`
	// Sub Account type name
	SubAccountType *string `form:"subAccountType,omitempty" json:"subAccountType,omitempty" yaml:"subAccountType,omitempty" xml:"subAccountType,omitempty"`
}

// Validate validates the articleMedia type instance.
func (ut *articleMedia) Validate() (err error) {
	if ut.AccountType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "accountType"))
	}
	if ut.SubAccountType == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "subAccountType"))
	}
	if ut.SubAccountType != nil {
		if !(*ut.SubAccountType == "desktop" || *ut.SubAccountType == "mobile" || *ut.SubAccountType == "apps") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.subAccountType`, *ut.SubAccountType, []interface{}{"desktop", "mobile", "apps"}))
		}
	}
	return
}

// Publicize creates ArticleMedia from articleMedia
func (ut *articleMedia) Publicize() *ArticleMedia {
	var pub ArticleMedia
	if ut.AccountType != nil {
		pub.AccountType = *ut.AccountType
	}
	if ut.ArticleID != nil {
		pub.ArticleID = ut.ArticleID
	}
	if ut.ChannelID != nil {
		pub.ChannelID = ut.ChannelID
	}
	if ut.CreatedDate != nil {
		pub.CreatedDate = ut.CreatedDate
	}
	if ut.CustomParams != nil {
		pub.CustomParams = make([]*ArticleCustomParamType, len(ut.CustomParams))
		for i2, elem2 := range ut.CustomParams {
			pub.CustomParams[i2] = elem2.Publicize()
		}
	}
	if ut.PublishedDate != nil {
		pub.PublishedDate = ut.PublishedDate
	}
	if ut.SubAccountType != nil {
		pub.SubAccountType = *ut.SubAccountType
	}
	return &pub
}

// ArticleMedia user type.
type ArticleMedia struct {
	// Account type name
	AccountType string `form:"accountType" json:"accountType" yaml:"accountType" xml:"accountType"`
	// Article ID
	ArticleID *string `form:"articleId,omitempty" json:"articleId,omitempty" yaml:"articleId,omitempty" xml:"articleId,omitempty"`
	// Article's channel ID
	ChannelID *string `form:"channelId,omitempty" json:"channelId,omitempty" yaml:"channelId,omitempty" xml:"channelId,omitempty"`
	// Article's created date (in unix seconds format)
	CreatedDate  *float64                  `form:"createdDate,omitempty" json:"createdDate,omitempty" yaml:"createdDate,omitempty" xml:"createdDate,omitempty"`
	CustomParams []*ArticleCustomParamType `form:"customParams,omitempty" json:"customParams,omitempty" yaml:"customParams,omitempty" xml:"customParams,omitempty"`
	// Article's published date (in unix seconds format)
	PublishedDate *float64 `form:"publishedDate,omitempty" json:"publishedDate,omitempty" yaml:"publishedDate,omitempty" xml:"publishedDate,omitempty"`
	// Sub Account type name
	SubAccountType string `form:"subAccountType" json:"subAccountType" yaml:"subAccountType" xml:"subAccountType"`
}

// Validate validates the ArticleMedia type instance.
func (ut *ArticleMedia) Validate() (err error) {
	if ut.AccountType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "accountType"))
	}
	if ut.SubAccountType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "subAccountType"))
	}
	if !(ut.SubAccountType == "desktop" || ut.SubAccountType == "mobile" || ut.SubAccountType == "apps") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.subAccountType`, ut.SubAccountType, []interface{}{"desktop", "mobile", "apps"}))
	}
	return
}

// version user type.
type version struct {
	// Git commit hash
	Git *string `form:"git,omitempty" json:"git,omitempty" yaml:"git,omitempty" xml:"git,omitempty"`
	// Application version
	Version *string `form:"version,omitempty" json:"version,omitempty" yaml:"version,omitempty" xml:"version,omitempty"`
}

// Validate validates the version type instance.
func (ut *version) Validate() (err error) {
	if ut.Version == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "version"))
	}
	return
}

// Publicize creates Version from version
func (ut *version) Publicize() *Version {
	var pub Version
	if ut.Git != nil {
		pub.Git = ut.Git
	}
	if ut.Version != nil {
		pub.Version = *ut.Version
	}
	return &pub
}

// Version user type.
type Version struct {
	// Git commit hash
	Git *string `form:"git,omitempty" json:"git,omitempty" yaml:"git,omitempty" xml:"git,omitempty"`
	// Application version
	Version string `form:"version" json:"version" yaml:"version" xml:"version"`
}

// Validate validates the Version type instance.
func (ut *Version) Validate() (err error) {
	if ut.Version == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "version"))
	}
	return
}
