// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "analytic-collector": Application Contexts
//
// Command:
// $ goagen
// --design=analytic-collector/api/design
// --out=$(GOPATH)/src/analytic-collector/api
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// CollectDtmCollectorContext provides the collector collectDtm action context.
type CollectDtmCollectorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCollectDtmCollectorContext parses the incoming request URL and body, performs validations and creates the
// context used by the collector controller collectDtm action.
func NewCollectDtmCollectorContext(ctx context.Context, r *http.Request, service *goa.Service) (*CollectDtmCollectorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CollectDtmCollectorContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CollectDtmCollectorContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "image/gif")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CollectDtmCollectorContext) BadRequest(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CollectDtmCollectorContext) Unauthorized(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CollectDtmCollectorContext) Forbidden(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CollectDtmCollectorContext) InternalServerError(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CollectPostCollectorContext provides the collector collectPost action context.
type CollectPostCollectorContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCollectPostCollectorContext parses the incoming request URL and body, performs validations and creates the
// context used by the collector controller collectPost action.
func NewCollectPostCollectorContext(ctx context.Context, r *http.Request, service *goa.Service) (*CollectPostCollectorContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CollectPostCollectorContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CollectPostCollectorContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CollectPostCollectorContext) BadRequest(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CollectPostCollectorContext) Unauthorized(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CollectPostCollectorContext) Forbidden(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CollectPostCollectorContext) InternalServerError(r *DetikError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VersionVersionContext provides the version version action context.
type VersionVersionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewVersionVersionContext parses the incoming request URL and body, performs validations and creates the
// context used by the version controller version action.
func NewVersionVersionContext(ctx context.Context, r *http.Request, service *goa.Service) (*VersionVersionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VersionVersionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VersionVersionContext) OK(r *DetikCollectorVersion) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
